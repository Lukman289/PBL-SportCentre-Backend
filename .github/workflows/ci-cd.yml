name: CI/CD Backend Sport Center

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Install global dependencies
        run: npm install -g rimraf
        
      - name: Create .env file for CI/CD
        run: |
          echo "NODE_ENV=development" > .env
          echo "PORT=3000" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sportcenter_test" >> .env
          echo "JWT_SECRET=test_secret_key_for_ci_cd" >> .env
          echo "JWT_EXPIRES_IN=1h" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "REDIS_PASSWORD=" >> .env
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Build
        run: npm run build
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm run test:quiet
        env:
          NODE_ENV: test
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /pbl/backend
            git pull origin main
            
            # Hapus node_modules dan package-lock.json
            rm -rf node_modules
            rm -f package-lock.json
            
            # Install global dependencies
            npm install -g rimraf
            
            # Install ulang semua dependensi
            npm install --no-fund --no-audit
            
            # Install debug, express dan finalhandler secara eksplisit
            npm install debug express finalhandler --save
            
            # Bersihkan cache npm
            npm cache clean --force
            
            # Build aplikasi
            npm run build
            
            # Restart aplikasi
            npm run restart:prod
            
            echo "Deployment ke server selesai" 